name: Build and Release Figaro Go

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - main

jobs:
  # Build Go binaries for multiple platforms
  build-binaries:
    name: Build Binaries
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            name: figaro-linux-amd64
            runner: ubuntu-latest
          - goos: linux
            goarch: arm64
            name: figaro-linux-arm64
            runner: ubuntu-latest
          - goos: windows
            goarch: amd64
            name: figaro-windowscross-amd64.exe
            runner: ubuntu-latest
          # Disabled due to high time and resource consumption on Windows runners
          # - goos: windows
          #   goarch: amd64
          #   name: figaro-windowsnative-amd64.exe
          #   runner: windows-latest
          - goos: darwin
            goarch: amd64
            name: figaro-darwin-amd64
            runner: macos-latest
          - goos: darwin
            goarch: arm64
            name: figaro-darwin-arm64
            runner: macos-latest

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Setup Windows build environment
        if: matrix.goos == 'windows' && matrix.runner == 'windows-latest'
        run: |
          # Ensure MinGW-w64 is available and in PATH for CGO
          choco install mingw -y
          refreshenv
        shell: powershell

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          if [ "${{ matrix.goos }}" = "linux" ]; then
            # For Linux, we need to install cross-compilation tools
            if [ "${{ matrix.goarch }}" = "arm64" ]; then
              sudo apt-get update
              sudo apt-get install -y gcc-aarch64-linux-gnu
              export CC=aarch64-linux-gnu-gcc
            fi
            export CGO_ENABLED=1
            go build -ldflags="-s -w -extldflags=-static" -o ${{ matrix.name }} ./cmd/figaro
          elif [ "${{ matrix.goos }}" = "windows" ]; then
            # Windows builds run on Windows runners with native toolchain
            if [ "${{ matrix.runner }}" = "windows-latest" ]; then
              # Native Windows build with CGO
              export CGO_ENABLED=1
              go build -ldflags="-s -w" -o ${{ matrix.name }} ./cmd/figaro
            else
              # Cross-compilation from Linux with MinGW-w64
              sudo apt-get update
              sudo apt-get install -y gcc-mingw-w64-x86-64
              export CC=x86_64-w64-mingw32-gcc
              export CGO_ENABLED=1
              go build -ldflags="-s -w" -o ${{ matrix.name }} ./cmd/figaro
            fi
          elif [ "${{ matrix.goos }}" = "darwin" ]; then
            # macOS builds - use native runner for better compatibility
            if [ "${{ matrix.runner }}" = "macos-latest" ]; then
              export CGO_ENABLED=1
              go build -ldflags="-s -w" -o ${{ matrix.name }} ./cmd/figaro
            else
              # Cross-compilation - disable CGO
              export CGO_ENABLED=0
              go build -ldflags="-s -w" -o ${{ matrix.name }} ./cmd/figaro
            fi
          else
            # Default case
            export CGO_ENABLED=0
            go build -ldflags="-s -w" -o ${{ matrix.name }} ./cmd/figaro
          fi
        shell: bash

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}

  # Build and push Docker images for multiple platforms
  build-docker:
    name: Build Docker Images
    needs: build-binaries  # Depend on the binary build job
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Linux AMD64 binary
        uses: actions/download-artifact@v4
        with:
          name: figaro-linux-amd64
          path: ./docker-context/

      - name: Download Linux ARM64 binary
        uses: actions/download-artifact@v4
        with:
          name: figaro-linux-arm64
          path: ./docker-context/

      - name: Copy Dockerfile to docker context
        run: |
          cp Dockerfile ./docker-context/
          ls -la ./docker-context/
          # Make binaries executable
          chmod +x ./docker-context/figaro-linux-*

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./docker-context
          file: ./docker-context/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Create GitHub release with binaries (only on tags)
  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-binaries # Do not wait for Docker build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          pattern: figaro-*

      - name: Create checksums
        run: |
          cd ./artifacts
          for dir in */; do
            cd "$dir"
            for file in *; do
              if [ -f "$file" ]; then
                sha256sum "$file" > "$file.sha256"
              fi
            done
            cd ..
          done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}
          files: ./artifacts/*/*.*
          generate_release_notes: true
          body: |
            ## Figaro Go Binary Release
            
            This release contains pre-compiled binaries for multiple platforms:
            
            ### Linux
            - `figaro-linux-amd64` - Linux x86_64
            - `figaro-linux-arm64` - Linux ARM64
            
            ### Windows  
            - `figaro-windowscross-amd64.exe` - Windows x86_64 cross compiled from Linux
            - `figaro-windowsnative-amd64.exe` - Windows x86_64 native build (currently not available)
            
            ### macOS
            - `figaro-darwin-amd64` - macOS x86_64 (Intel)
            - `figaro-darwin-arm64` - macOS ARM64 (Apple Silicon)
            
            ### Docker Images
            Multi-platform Docker images are also available:
            ```bash
            docker run --rm -p 8080:8080 -v $(pwd)/data:/data ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ```
            
            ### Usage
            1. Download the binary for your platform
            2. Make it executable: `chmod +x figaro-*`
            3. Run: `./figaro-*`
            4. Open http://localhost:8080 in your browser
            5. Login with username: `demo`, password: `demo`
